// Code generated by Kitex v0.0.8. DO NOT EDIT.

package gotest

import (
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"gotest/kitex_gen/api"
)

func serviceInfo() *kitex.ServiceInfo {
	return gotestServiceInfo
}

var gotestServiceInfo = newServiceInfo()

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "gotest"
	handlerType := (*api.Gotest)(nil)
	methods := map[string]kitex.MethodInfo{
		"add":    kitex.NewMethodInfo(addHandler, newGotestAddArgs, newGotestAddResult, false),
		"delete": kitex.NewMethodInfo(deleteHandler, newGotestDeleteArgs, newGotestDeleteResult, false),
		"select": kitex.NewMethodInfo(selectHandler, newGotestSelectArgs, newGotestSelectResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.0.8",
		Extra:           extra,
	}
	return svcInfo
}

func addHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.GotestAddArgs)
	realResult := result.(*api.GotestAddResult)
	success, err := handler.(api.Gotest).Add(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGotestAddArgs() interface{} {
	return api.NewGotestAddArgs()
}

func newGotestAddResult() interface{} {
	return api.NewGotestAddResult()
}

func deleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.GotestDeleteArgs)
	realResult := result.(*api.GotestDeleteResult)
	success, err := handler.(api.Gotest).Delete(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGotestDeleteArgs() interface{} {
	return api.NewGotestDeleteArgs()
}

func newGotestDeleteResult() interface{} {
	return api.NewGotestDeleteResult()
}

func selectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.GotestSelectArgs)
	realResult := result.(*api.GotestSelectResult)
	success, err := handler.(api.Gotest).Select(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGotestSelectArgs() interface{} {
	return api.NewGotestSelectArgs()
}

func newGotestSelectResult() interface{} {
	return api.NewGotestSelectResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Add(ctx context.Context, req *api.AddRequest) (r *api.AddResponse, err error) {
	var _args api.GotestAddArgs
	_args.Req = req
	var _result api.GotestAddResult
	if err = p.c.Call(ctx, "add", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Delete(ctx context.Context, req *api.DeleteRequest) (r *api.DeleteResponse, err error) {
	var _args api.GotestDeleteArgs
	_args.Req = req
	var _result api.GotestDeleteResult
	if err = p.c.Call(ctx, "delete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Select(ctx context.Context, req *api.SelectRequest) (r *api.SelectResponse, err error) {
	var _args api.GotestSelectArgs
	_args.Req = req
	var _result api.GotestSelectResult
	if err = p.c.Call(ctx, "select", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
